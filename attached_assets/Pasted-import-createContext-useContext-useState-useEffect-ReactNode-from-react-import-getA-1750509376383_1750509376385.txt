import {
  createContext, useContext, useState, useEffect, ReactNode
} from 'react';
import {
  getAuth,
  setPersistence,
  browserSessionPersistence,
  getRedirectResult,
  onAuthStateChanged,
  signInWithRedirect,
  signInWithPopup,
  GoogleAuthProvider,
  User,
  signOut as firebaseSignOut
} from 'firebase/auth';
import { auth } from '../lib/firebase';

interface AuthContextType {
  currentUser: User | null;
  loading: boolean;
  signInWithGoogle: () => Promise<void>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType>({
  currentUser: null,
  loading: true,
  signInWithGoogle: async () => {},
  signOut: async () => {}
});

export const useAuth = () => useContext(AuthContext);

export const AuthProvider: React.FC<{children: ReactNode}> = ({ children }) => {
  const [currentUser, setCurrentUser] = useState<User|null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const init = async () => {
      try {
        console.log('[AUTH] setting session persistence');
        await setPersistence(auth, browserSessionPersistence);

        console.log('[AUTH] checking redirect result');
        const result = await getRedirectResult(auth);
        if (result?.user) {
          console.log('[AUTH] redirectResult user:', result.user.email);
          setCurrentUser(result.user);
          setLoading(false);
          return;
        }

        console.log('[AUTH] no redirectResult, attaching onAuthStateChanged');
        onAuthStateChanged(auth, user => {
          console.log('[AUTH] onAuthStateChanged user:', user?.email || 'none');
          setCurrentUser(user);
          setLoading(false);
        });
      } catch (err) {
        console.error('[AUTH] init error', err);
        setLoading(false);
      }
    };

    init();
  }, []);

  const signInWithGoogle = async () => {
    const provider = new GoogleAuthProvider();
    const isMobile = /Mobi|Android|iPhone/i.test(navigator.userAgent);

    try {
      if (isMobile) {
        console.log('[AUTH] mobile → redirect');
        await signInWithRedirect(auth, provider);
      } else {
        console.log('[AUTH] desktop → popup');
        const { user } = await signInWithPopup(auth, provider);
        console.log('[AUTH] popup sign-in user:', user.email);
        setCurrentUser(user);
      }
    } catch (err: any) {
      console.error('[AUTH] signIn error', err);
      // fallback to redirect if popup blocked
      if (err.code === 'auth/popup-blocked') {
        console.log('[AUTH] popup blocked, using redirect fallback');
        await signInWithRedirect(auth, provider);
      } else throw err;
    }
  };

  const signOut = async () => {
    await firebaseSignOut(auth);
    setCurrentUser(null);
  };

  return (
    <AuthContext.Provider value={{ currentUser, loading, signInWithGoogle, signOut }}>
      {children}
    </AuthContext.Provider>
  );
};